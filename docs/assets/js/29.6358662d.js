(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{312:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"control-flow-in-ghul"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#control-flow-in-ghul"}},[t._v("#")]),t._v(" control flow in ghūl")]),t._v(" "),s("h2",{attrs:{id:"assert-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-statement"}},[t._v("#")]),t._v(" assert statement")]),t._v(" "),s("p",[t._v("In ghūl the "),s("code",[t._v("assert")]),t._v(" statement is used to ensure an expected condition holds and to throw an exception if it does not. An assert statement starts with "),s("code",[t._v("assert")]),t._v(", followed by an expression that must evaluate to a bool, followed by "),s("code",[t._v("else")]),t._v(", and then a value to throw. If the value to throw is a string, it will be wrapped in an "),s("code",[t._v("AssertionFailedException")]),t._v(". Otherwise it must be of a throwable type.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("assert")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("true")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("else")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"all bets are off"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" "),s("span",{staticClass:"token comment"},[t._v("// should not throw")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("assert")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("false")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("else")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"expect AssertionFailedException"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("assert")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("else")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("ArgumentOutOfRangeException")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"if-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-statement"}},[t._v("#")]),t._v(" if statement")]),t._v(" "),s("p",[t._v("If statements allow the execution of different code blocks based on specific conditions.")]),t._v(" "),s("h3",{attrs:{id:"if-then-fi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-then-fi"}},[t._v("#")]),t._v(" if-then-fi")]),t._v(" "),s("p",[t._v("This is the simplest form of a conditional statement. It checks a condition and executes the subsequent block of code if the condition is true.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("condition")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code to execute if condition is true")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("h3",{attrs:{id:"if-then-else-fi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-then-else-fi"}},[t._v("#")]),t._v(" if-then-else-fi")]),t._v(" "),s("p",[t._v("This form allows for an alternative block of code to be executed if the condition is false.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("condition")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code to execute if condition is true")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code to execute if condition is false")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is not empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("h3",{attrs:{id:"if-then-elif-fi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-then-elif-fi"}},[t._v("#")]),t._v(" if-then-elif-fi")]),t._v(" "),s("p",[t._v("This form is used for multiple conditions. If the initial condition is false, the "),s("code",[t._v("elif")]),t._v(" conditions are checked in order. The corresponding block for the first true condition is executed.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("first")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token variable"},[t._v("condition")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code for first condition]")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("elif")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("second")]),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token variable"},[t._v("condition")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code for second condition]")]),t._v("\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("more")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("elif")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("conditions")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("needed")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code if all conditions are false")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is not empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("10")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list has lots of elements"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("elif")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list has some elements"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("elif")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("list")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("count")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list has a few elements"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"list is empty"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n")])])]),s("h2",{attrs:{id:"while-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-statement"}},[t._v("#")]),t._v(" while statement")]),t._v(" "),s("h3",{attrs:{id:"while-do-od"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-do-od"}},[t._v("#")]),t._v(" while-do-od")]),t._v(" "),s("p",[t._v("The while loop in ghūl executes a block of code repeatedly as long as a specified condition remains true. The condition is evaluated before each iteration of the loop's body.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("while")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("condition")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code to execute while the condition is true")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("while")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop prints numbers from 0 to 4. It terminates when counter becomes 5, as the condition counter < 5 then evaluates to false.")]),t._v(" "),s("h3",{attrs:{id:"break-and-continue-in-while-loops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break-and-continue-in-while-loops"}},[t._v("#")]),t._v(" break and continue in while loops")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("break")]),t._v(" statement immediately exits the loop, while "),s("code",[t._v("continue")]),t._v(" skips the remaining code in the current iteration and proceeds to the next iteration immediately before the condition is reevaluated.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("while")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("10")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("break")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop exits when counter reaches 5 without proceeding to execute `write_line(counter)``")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("while")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("continue")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop skips the call to "),s("code",[t._v("write_line")]),t._v(" when counter is 3.")]),t._v(" "),s("h2",{attrs:{id:"for-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-statement"}},[t._v("#")]),t._v(" for statement")]),t._v(" "),s("h3",{attrs:{id:"for-in-do-od"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-do-od"}},[t._v("#")]),t._v(" for-in-do-od")]),t._v(" "),s("p",[t._v("The for loop in ghūl steps through an iterable object executing the loop body once for every value the iterator produces. An iterable object is something that implements either "),s("code",[t._v("Collections.Iterable[T]")]),t._v(" or "),s("code",[t._v("Collections.Iterator[T]")]),t._v(", and the loop variable's type is inferred to be "),s("code",[t._v("T")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("variable")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("iterable")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// variable is set to each element of iterator in turn")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("The variable is defined by the for loop and its scope is the for loop body from the "),s("code",[t._v("do")]),t._v(" up to the "),s("code",[t._v("od")])]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token comment"},[t._v("// i not in scope here")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v(" "),s("span",{staticClass:"token comment"},[t._v("// i defined here, with type `int`")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// i in scope here:")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("i")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("h3",{attrs:{id:"range-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#range-operators"}},[t._v("#")]),t._v(" range operators")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("..")]),t._v(" and "),s("code",[t._v("::")]),t._v(" operators construct integer ranges that can be iterated over by for statements. "),s("code",[t._v("..")]),t._v(" constructs ranges that are inclusive of its left operand and exclusive of its right operand:")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token operator"},[t._v("..")]),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// i will take values 0, 1, 2, 3, 4 in sequence")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("i")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[s("code",[t._v("::")]),t._v(" constructs a range that is inclusive of its left and right operands:")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),t._v("::"),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// i will take values 1, 2, 3, 4, 5 in sequence")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("i")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("These operators are not for loop specific and can be used in any expression context")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("zero_to_four")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token operator"},[t._v("..")]),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("five_to_nine")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token operator"},[t._v("..")]),s("span",{staticClass:"token number"},[t._v("10")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("zero_to_nine")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("zero_to_four")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("|")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("cat")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("five_to_nine")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("while")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("zero_to_nine")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("has_next")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("range")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("next")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("h3",{attrs:{id:"break-and-continue-in-for-loops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break-and-continue-in-for-loops"}},[t._v("#")]),t._v(" break and continue in for loops")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("break")]),t._v(" statement immediately exits the loop, while "),s("code",[t._v("continue")]),t._v(" skips the remaining code in the current iteration and proceeds to the next iteration immediately before attempting to read the next element from the iterator")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token operator"},[t._v("..")]),s("span",{staticClass:"token number"},[t._v("10")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("break")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop exits when counter reaches 5, without proceeding to execute "),s("code",[t._v("write_line(5)")])]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("for")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("in")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token operator"},[t._v("..")]),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("continue")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop skips the call to "),s("code",[t._v("write_line")]),t._v(" when counter is 3.")]),t._v(" "),s("h2",{attrs:{id:"do-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#do-statement"}},[t._v("#")]),t._v(" do statement")]),t._v(" "),s("h3",{attrs:{id:"do-od"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#do-od"}},[t._v("#")]),t._v(" do-od")]),t._v(" "),s("p",[t._v("The do / od loop in ghūl is used to create an indefinite loop which will continue to execute until explicitly broken with a break statement.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// code to execute indefinitely")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// break statement to exit loop")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("break")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop will run indefinitely until counter reaches 5, at which point the break statement terminates the loop.")]),t._v(" "),s("h3",{attrs:{id:"break-and-continue-in-do-od-loops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break-and-continue-in-do-od-loops"}},[t._v("#")]),t._v(" break and continue in do-od loops")]),t._v(" "),s("p",[t._v("The break and continue statements work similarly in do / od loops as they do in while loops.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("do")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("continue")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("counter")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("counter")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("break")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("od")]),t._v("\n")])])]),s("p",[t._v("This loop skips the write_line statement when counter is 3 and breaks out of the loop when counter reaches 5.")]),t._v(" "),s("h2",{attrs:{id:"case-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#case-statement"}},[t._v("#")]),t._v(" case statement")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("case")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("value")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),s("span",{staticClass:"token number"},[t._v("1")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"minus one"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(":\n    "),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("result")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"zero"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("result")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"one"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"two"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"three"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"four"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),t._v(":\n    "),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("result")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"five"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("result")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("6")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("7")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("8")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("9")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"more than five and less than ten"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("when")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("13")]),t._v(":\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"unlucky"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("default")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"less than -1 or more than nine"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("esac")]),t._v("\n")])])]),s("h2",{attrs:{id:"try-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-statement"}},[t._v("#")]),t._v(" try statement")]),t._v(" "),s("h3",{attrs:{id:"try-catch-finally-yrt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally-yrt"}},[t._v("#")]),t._v(" try-catch-finally-yrt")]),t._v(" "),s("p",[t._v("The try-catch-finally-yrt block in ghūl consists of four parts:")]),t._v(" "),s("ul",[s("li",[t._v("try block: the block where code that might throw an exception is placed.")]),t._v(" "),s("li",[t._v("exception to catch: exceptions that are assignment compatible with this class will be caught and control will enter the catch block")]),t._v(" "),s("li",[t._v("catch block: this code block catches and handles exceptions. It takes an exception variable and a type.")]),t._v(" "),s("li",[t._v("finally block: this code block is executed after the try and catch blocks, regardless of whether an exception was thrown or not. It is typically used for clean-up code.")])]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Code that might throw an exception")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("SomeExceptionType")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Exception handling code")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("finally")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Clean-up code, always executed")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n")])])]),s("p",[t._v("If different types of exception should be caught, then there can be multiple exception clauses and catch blocks")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("StreamReader")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("reader")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StreamReader")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"file.txt"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("content")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("read_to_end")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("content")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("FileNotFoundException")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Handle the case where the file is not found")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"Error: file not found: "')]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("message")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("IOException")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Handle errors during file reading")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"Error: reading file: "')]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("message")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("finally")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Close the file and clean up resources")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v("?")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("close")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"File processing completed, file closed."')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n")])])]),s("h3",{attrs:{id:"try-catch-yrt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-yrt"}},[t._v("#")]),t._v(" try-catch-yrt")]),t._v(" "),s("p",[t._v("The finally clause can be omitted if no clean-up is required")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Code that might throw an exception")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("SomeExceptionType")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Exception handling code")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("content")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("File")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("read_all_text")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"file.txt"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("content")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"File processing completed."')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("FileNotFoundException")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Handle the case where the file is not found")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"Error: file not found: "')]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("message")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("catch")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("IOException")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Handle errors during file reading")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"Error: reading file: "')]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("e")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("message")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"try-finally-yrt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-finally-yrt"}},[t._v("#")]),t._v(" try-finally-yrt")]),t._v(" "),s("p",[t._v("The catch clause can be omitted if no exceptions need to be caught but clean-up is still required")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Code that might throw an exception")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("finally")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// Clean-up code, always executed")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n")])])]),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("StreamReader")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("try")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("reader")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("new")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("StreamReader")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"file.txt"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("content")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("read_to_end")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("content")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token function"},[t._v("write_line")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"File processing completed."')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token control"},[t._v("finally")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v("?")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token variable"},[t._v("reader")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("close")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n\n    "),s("span",{staticClass:"token comment"},[t._v("// Any exceptions will be thrown to the calling code")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("yrt")]),t._v("\n")])])]),s("h2",{attrs:{id:"return-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-statement"}},[t._v("#")]),t._v(" return statement")]),t._v(" "),s("h3",{attrs:{id:"return-without-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-without-value"}},[t._v("#")]),t._v(" return without value")]),t._v(" "),s("p",[t._v("In functions of void return type, a bare "),s("code",[t._v("return")]),t._v(" statement with no value returns control flow directly to the caller")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("tries")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n\n"),s("span",{staticClass:"token function"},[t._v("try_something")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("limit")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("tries")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("limit")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("return")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v(" "),s("span",{staticClass:"token comment"},[t._v("// give up")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n\n    "),s("span",{staticClass:"token variable"},[t._v("tries")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("tries")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token comment"},[t._v("// do stuff")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"return-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-value"}},[t._v("#")]),t._v(" return value")]),t._v(" "),s("p",[t._v("In functions of non-void return type, "),s("code",[t._v("return")]),t._v(" statements must return a value of a type that's assignment compatible with the function's return type")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token function"},[t._v("fib")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("n")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("->")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("n")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("<")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("elif")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("n")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n        "),s("span",{staticClass:"token control"},[t._v("return")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("fib")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("n")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("+")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("fib")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("n")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("-")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n")])])]),s("h3",{attrs:{id:"default-return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#default-return"}},[t._v("#")]),t._v(" default return")]),t._v(" "),s("p",[t._v("If execution reaches the end of a non-void function without encountering a return statement, then the default value of the function's return type is returned to the caller.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token function"},[t._v("default_return")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("->")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("int")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token comment"},[t._v("// do nothing")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("default_return")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token control"},[t._v("assert")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("==")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("0")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);