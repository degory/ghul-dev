(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{322:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"language-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#language-basics"}},[s._v("#")]),s._v(" language basics")]),s._v(" "),a("h2",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" syntax")]),s._v(" "),a("p",[s._v("ghūl syntax is inspired by a number of non-brace languages, including ALGOL 68 and Pascal")]),s._v(" "),a("h3",{attrs:{id:"identifiers-and-keywords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifiers-and-keywords"}},[s._v("#")]),s._v(" identifiers and keywords")]),s._v(" "),a("p",[s._v("Identifiers in ghūl follow the convention of "),a("code",[s._v("snake_case")]),s._v(" for variables, functions, and properties, "),a("code",[s._v("PascalCase")]),s._v(" for namespaces and traits, and "),a("code",[s._v("MACRO_CASE")]),s._v(" for concrete types like classes, structs, and enums. ghūl keywords are lowercase.")]),s._v(" "),a("p",[s._v("ghūl relies on keywords for block structure where other languages use braces or indentation. Keywords are context specific and generally come in pairs where the closing keyword is the reverse or mirror image of the opening keyword. In the examples below "),a("code",[s._v("is")]),s._v(" introduces a method or class body and its block is closed by the reverse keyword "),a("code",[s._v("si")])]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_variable")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("42")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token function"},[s._v("print_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("thing")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"The thing is: '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("thing")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("PERSON")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("name")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("age")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("h3",{attrs:{id:"expressions-and-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expressions-and-statements"}},[s._v("#")]),s._v(" expressions and statements")]),s._v(" "),a("p",[s._v("Expressions in ghūl are constructs that return a value, while statements perform actions. All expressions can be used where statements are allowed, but only if statements can be used as expressions.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// variable declaration statement")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// expression used as part of a declaration statement")]),s._v("\n\n"),a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// 'if' is a statement, 'x > 5' is an expression")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"x is greater than 5"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("fi")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("z")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("else")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("fi")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// if can also be used as an expression")]),s._v("\n")])])]),a("h3",{attrs:{id:"function-declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-declarations"}},[s._v("#")]),s._v(" function declarations")]),s._v(" "),a("p",[s._v("Functions in ghūl are declared with an optional return type, a name, a list of parameters in parentheses, and a body enclosed in "),a("code",[s._v("is")]),s._v(" and "),a("code",[s._v("si")]),s._v(" keywords")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("greet")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("name")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("void")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Hello, '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("name")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('!"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Functions can also have an expression body using "),a("code",[s._v("=>")]),s._v(" instead of "),a("code",[s._v("is")]),s._v(" / "),a("code",[s._v("si")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("square")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"control-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-flow"}},[s._v("#")]),s._v(" control flow")]),s._v(" "),a("p",[s._v("ghūl supports various "),a("RouterLink",{attrs:{to:"/control-flow.html"}},[s._v("control flow constructs")]),s._v(" like "),a("code",[s._v("if")]),s._v(", "),a("code",[s._v("else")]),s._v(", "),a("code",[s._v("while")]),s._v(", "),a("code",[s._v("for")]),s._v(", and "),a("code",[s._v("case")]),s._v(" expressions.")],1),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Positive"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("elif")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Negative"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("else")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Zero"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("fi")]),s._v("\n\n"),a("span",{staticClass:"token control"},[s._v("for")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("item")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("in")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_list")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("do")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("process")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("item")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("od")]),s._v("\n")])])]),a("h3",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[s._v("#")]),s._v(" types")]),s._v(" "),a("p",[s._v("ghūl is statically typed, with some support for "),a("RouterLink",{attrs:{to:"/type-inference.html"}},[s._v("type inference")]),s._v(". Types can be explicitly specified using a colon "),a("code",[s._v(":")]),s._v(" plus a type expression")],1),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("42")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Hello"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// type inferred as string")]),s._v("\n")])])]),a("p",[a("RouterLink",{attrs:{to:"/definitions.html#types"}},[s._v("User types")]),s._v(" are defined using "),a("code",[s._v("class")]),s._v(", "),a("code",[s._v("struct")]),s._v(", "),a("code",[s._v("trait")]),s._v(", "),a("code",[s._v("enum")]),s._v(", and "),a("code",[s._v("union")]),s._v(" keywords.")],1),s._v(" "),a("h2",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[s._v("#")]),s._v(" data types")]),s._v(" "),a("p",[s._v("ghūl supports a variety of data types, including primitives, arrays, and tuples.")]),s._v(" "),a("h3",{attrs:{id:"primitive-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primitive-types"}},[s._v("#")]),s._v(" primitive types")]),s._v(" "),a("p",[s._v("ghūl provides the following primitive data types:")]),s._v(" "),a("ul",[a("li",[s._v("integer types: "),a("code",[s._v("byte")]),s._v(", "),a("code",[s._v("ubyte")]),s._v(", "),a("code",[s._v("short")]),s._v(", "),a("code",[s._v("ushort")]),s._v(", "),a("code",[s._v("int")]),s._v(", "),a("code",[s._v("uint")]),s._v(", "),a("code",[s._v("long")]),s._v(", "),a("code",[s._v("ulong")]),s._v(", "),a("code",[s._v("word")]),s._v(", "),a("code",[s._v("uword")])]),s._v(" "),a("li",[s._v("floating-point types: "),a("code",[s._v("single")]),s._v(", "),a("code",[s._v("double")])]),s._v(" "),a("li",[s._v("boolean type: "),a("code",[s._v("bool")])]),s._v(" "),a("li",[s._v("character type: "),a("code",[s._v("char")])]),s._v(" "),a("li",[s._v("void type: "),a("code",[s._v("void")])])]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_int")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("42")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_float")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3.14")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_bool")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("bool")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("true")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("my_char")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("char")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" '"),a("span",{staticClass:"token class-name"},[s._v("A")]),s._v("'"),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("These types are used to represent basic values in ghūl programs.")]),s._v(" "),a("h3",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[s._v("#")]),s._v(" arrays")]),s._v(" "),a("p",[s._v("ghūl supports arrays, which are fixed-size, "),a("strong",[s._v("immutable")]),s._v(" collections of elements of the same type. Array types are denoted using square brackets [] after the element type.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("numbers")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Arrays can be constructed with an "),a("a",{attrs:{href:""}},[s._v("array literal")])]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("primes")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("7")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("11")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Array elements can be read with indexer syntax")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("p")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("primes")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token variable"},[s._v("i")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"tuples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tuples"}},[s._v("#")]),s._v(" tuples")]),s._v(" "),a("p",[s._v("Tuples in ghūl are lightweight, immutable data structures that can hold a fixed number of elements of different types. Tuple types use parentheses "),a("code",[s._v("(")]),s._v(" "),a("code",[s._v(")")]),s._v(", with elements separated by commas. Tuple literals are similarly constructed with "),a("code",[s._v("(")]),s._v(" "),a("code",[s._v(")")]),s._v(" and comma delimited elements")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),s._v(": "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("20")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),s._v(": "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Alice"')]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("30")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Tuple elements can be accessed using the dot "),a("code",[s._v(".")]),s._v(" notation followed by the element name:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("`"),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("`"),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("name")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("`"),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("age")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("`"),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Tuple elements can be given more descriptive names, either in the type or in the tuple literal:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),s._v(": "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("20")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("name")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Alice"')]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("age")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("30")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("x")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("y")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("name")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("name")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("age")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("age")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("ghūl also supports tuple destructuring:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("a")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("b")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("name")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("age")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("person")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("These are the basic data types available in ghūl. The language also supports more advanced types such as classes, structs, traits, enums, and unions, which will be covered in later sections of the documentation.")]),s._v(" "),a("h3",{attrs:{id:"type-conversions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-conversions"}},[s._v("#")]),s._v(" type conversions")]),s._v(" "),a("p",[s._v("ghūl does not perform implicit type conversion (coercion) between scalar types; all scalar type conversions must be explicitly cast. However, ghūl supports polymorphic behavior by allowing upcasting, where instances of derived classes or interfaces can be automatically coerced to compatible ancestor types in the class/interface hierarchy.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("d")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0d "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0d"),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// OK both addends are type double")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("e")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0d "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// Compile time error because addends are mixed types (double vs int)")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("e")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0d "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("cast")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// OK with explicit cast")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("o")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("object")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"hello"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v('// OK "hello" is a string, and string is derived from object')]),s._v("\n")])])]),a("h2",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[s._v("#")]),s._v(" variables")]),s._v(" "),a("p",[s._v("ghūl has three kinds of variables: locals declared within the body of a function or method, function or method arguments and captured values.")]),s._v(" "),a("h3",{attrs:{id:"locals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#locals"}},[s._v("#")]),s._v(" locals")]),s._v(" "),a("p",[s._v("Local variables are declared with "),a("code",[s._v("let")]),s._v(" followed by the variable name, plus a type and/or an initializer.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1234")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("k")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5678")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Local variables with no explicit initializer are initialized to the default value for their type (zero, false, or null)")]),s._v(" "),a("h3",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[s._v("#")]),s._v(" arguments")]),s._v(" "),a("p",[s._v("Arguments will be covered in detail with functions and methods, but the basic form is the argument name followed by its type.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("some_function")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("argument")]),s._v(": "),a("span",{staticClass:"token variable"},[s._v("type")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v("\n")])])]),a("h3",{attrs:{id:"captured-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#captured-values"}},[s._v("#")]),s._v(" captured values")]),s._v(" "),a("p",[s._v("Captured values will be covered with "),a("RouterLink",{attrs:{to:"/language-basics.html#function"}},[s._v("function literals")]),s._v(". They are not explicitly defined but inferred from context.")],1),s._v(" "),a("h3",{attrs:{id:"scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[s._v("#")]),s._v(" scope")]),s._v(" "),a("p",[s._v("The scope of all variable definitions is from the point of declaration to the end of the innermost block that contains the declaration. Blocks will be covered later, but generally a block is a control flow statement or a function or method body.")]),s._v(" "),a("h3",{attrs:{id:"type-inference-and-explicit-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-inference-and-explicit-types"}},[s._v("#")]),s._v(" type inference and explicit types")]),s._v(" "),a("p",[s._v("ghūl can infer the type of local variables from their initializer if present. It's a compile time error if a variable doesn't have either an explicit type or an initializer, or if an initializer is not assignment compatible with any explicit type.")]),s._v(" "),a("h2",{attrs:{id:"literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[s._v("#")]),s._v(" literals")]),s._v(" "),a("p",[s._v("Literal expressions represent fixed values of a specific type.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("integer_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("42")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("floating_point_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3.14")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("string_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Hello, world!"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("boolean_literal_true")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("true")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("boolean_literal_false")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("false")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"operators-and-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators-and-expressions"}},[s._v("#")]),s._v(" operators and expressions")]),s._v(" "),a("h3",{attrs:{id:"arithmetic-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operators"}},[s._v("#")]),s._v(" arithmetic operators")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("add")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("sub")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("-")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("mul")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("div")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("12")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("/")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("mod")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("13")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("%")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"comparison-and-logical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-and-logical-operators"}},[s._v("#")]),s._v(" comparison and logical operators")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("gt")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// true")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("gte")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// true")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("lt")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// false")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("lte")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// true")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("eq")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("==")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// false")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("neq")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("1")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("!=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// true")]),s._v("\n")])])]),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("list")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("index")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("search_value")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("and_then")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("index")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("list")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("/\\")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("list")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token variable"},[s._v("index")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("==")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("search_value")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// false")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("or_else")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("index")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("list")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("\\/")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("list")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token variable"},[s._v("index")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("!=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("search_value")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// true")]),s._v("\n")])])]),a("h2",{attrs:{id:"assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment"}},[s._v("#")]),s._v(" assignment")]),s._v(" "),a("p",[s._v("variables and properties can be updated via assignment statements")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("s")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Hello"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token variable"},[s._v("s")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("s")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('" World!"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token variable"},[s._v("thing")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("property")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);