(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{311:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[a._v("#")]),a._v(" expressions")]),a._v(" "),t("p",[a._v("Expressions in ghūl are constructs that evaluate to a value. They can be used to perform calculations, make comparisons, and combine values in various ways.")]),a._v(" "),t("h2",{attrs:{id:"literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[a._v("#")]),a._v(" literals")]),a._v(" "),t("h3",{attrs:{id:"integers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#integers"}},[a._v("#")]),a._v(" integers")]),a._v(" "),t("p",[a._v("Integer literals consist of an optional radix (base), followed by a sequence of digits with optional underscores for readability, followed by a dot and a decimal fraction and/or exponent (for floating point numbers) and finally a type suffix.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 12_345_678"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// int")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hex")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 0x1234_ABCD"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// int")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("long")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 1_000_000_000_000_000L"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// long")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hex_unsigned_long")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 0x1234_5678__9ABC_DEF0_UL"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// ulong")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("b")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 99b"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// byte")]),a._v("\n")])])]),t("h3",{attrs:{id:"char"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[a._v("#")]),a._v(" char")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("c")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" '"),t("span",{staticClass:"token variable"},[a._v("c")]),a._v("'"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("u_macron")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 'ū'\n")])])]),t("h3",{attrs:{id:"floating-point"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#floating-point"}},[a._v("#")]),a._v(" floating point")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("s")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123.456")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// single")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("t")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("456E5"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// single")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("d")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("456D"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// double")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("e")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 123_456_789_000"),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0D "),t("span",{staticClass:"token comment"},[a._v("// double")]),a._v("\n")])])]),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" string")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hello_world")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"Hello World!"')]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("unicode")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"ghūl programming language"')]),a._v("\n")])])]),t("h3",{attrs:{id:"array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[a._v("#")]),a._v(" array")]),a._v(" "),t("p",[a._v("Array literals are constructed from a comma separated list of element values enclosed in "),t("code",[a._v("[")]),a._v(" and "),t("code",[a._v("]")]),a._v(". The array element type is inferred as the most specific type compatible with all elements (which may be "),t("code",[a._v("object")]),a._v(" if no more specific ancestor type exists). The resulting array type is "),t("code",[a._v("E[]")]),a._v(" where "),t("code",[a._v("E")]),a._v(" is the inferred element type.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("animals")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token string"},[a._v('"frog"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"bat"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"elephant"')]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[string]")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token string"},[a._v('"frog"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1234")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("12.5")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[object]")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("lists")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("6")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("7")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("7")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[List[int]]")]),a._v("\n")])])]),t("h3",{attrs:{id:"tuple"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple"}},[a._v("#")]),a._v(" tuple")]),a._v(" "),t("p",[a._v("Tuple literals are constructed from a comma separated list of elements enclosed in "),t("code",[a._v("(")]),a._v(" and "),t("code",[a._v(")")]),a._v(". Each element can be a bare value or a named value, and each element can optionally specify a type. Where explicit types are omitted, element types will be inferred.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("path")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"/tmp/my-file.txt"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1234")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// (path: string, id: int)")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("path")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("id")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("If tuple elements are not explicitly named, they are assigned names consisting of a back-tick followed by an index")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"thing"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("12.34")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// (string, int) with element names `0 and `1")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("name")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("`"),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("weight")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("`"),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[a._v("#")]),a._v(" function")]),a._v(" "),t("p",[a._v("Function literals are constructed from an parenthesized argument list, a return type, and a return expression or a function body. If there is only one argument, no parentheses are needed.")]),a._v(" "),t("h4",{attrs:{id:"expression-body-function-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expression-body-function-literal"}},[a._v("#")]),a._v(" expression body function literal")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("simple_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h4",{attrs:{id:"block-body-function-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block-body-function-literal"}},[a._v("#")]),a._v(" block body function literal")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("complex_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("is")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("return")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("si")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h4",{attrs:{id:"type-inference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-inference"}},[a._v("#")]),a._v(" type inference")]),a._v(" "),t("p",[a._v("Return type can usually be omitted provided it can be inferred from the type of the expression body or any values returned from the block body")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("simple_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("complex_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("is")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("return")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("si")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Argument types usually can be inferred if the function literal is being passed into a function.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token variable"},[a._v("list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("|")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("filter")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("element")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("element")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// type of element is inferred to be int")]),a._v("\n")])])]),t("h4",{attrs:{id:"capturing-and-closure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#capturing-and-closure"}},[a._v("#")]),a._v(" capturing and closure")]),a._v(" "),t("p",[a._v("In ghūl, function literals can capture and utilize values from their surrounding lexical scope, thereby forming closures. It's important to note that what are captured are the values of variables at the point of the function literal's creation, rather than the variables themselves. This distinction is crucial for understanding how closures work in ghūl.")]),a._v(" "),t("p",[a._v("When a function literal is constructed, it creates read-only snapshots of the values from the outer scopes that are referenced within it. These snapshots are immutable in the sense that the literal cannot alter the captured values. However, the immutability applies to the value's binding, not necessarily to the value itself. In ghūl, like in many .NET languages, a value could be a reference to an object. While the reference is immutable and remains constant throughout the lifetime of the function literal, the object it points to can still be mutable. This means that if the captured value is an object reference, the object's state can be modified either by the closure itself or by other code, but the reference held by the closure will always point to the same object.")]),a._v(" "),t("p",[a._v("Consider a simple closure that captures a loop variable:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("g")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("In this case, "),t("code",[a._v("g")]),a._v(" captures the value of "),t("code",[a._v("i")]),a._v(" at the moment of "),t("code",[a._v("g")]),a._v("'s creation. The variable "),t("code",[a._v("i")]),a._v(" itself is not captured; only its value at a specific point in time is. Here is a more complete example:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token comment"},[a._v("// Define a list to hold the closures:")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("LIST")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token comment"},[a._v("// Iterate over an integer range:")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("for")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("in")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),a._v("::"),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("do")]),a._v("\n    "),t("span",{staticClass:"token comment"},[a._v("// Create a closure that captures the current value of i:")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n    "),t("span",{staticClass:"token comment"},[a._v("// Add the closure to the list:")]),a._v("\n    "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("add")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("closure")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("od")]),a._v("\n\n"),t("span",{staticClass:"token comment"},[a._v("// Each closure captured the value of i at the time of its creation:")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("for")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("in")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("do")]),a._v("\n    "),t("span",{staticClass:"token function"},[a._v("write_line")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"Closure captured value: '),t("span",{staticClass:"token interpolation"},[t("span",{staticClass:"token interpolation-punctuation punctuation"},[a._v("{")]),t("span",{staticClass:"token function"},[a._v("closure")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token interpolation-punctuation punctuation"},[a._v("}")])]),a._v('"')]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("od")]),a._v("\n")])])]),t("p",[a._v("If the captured value is a reference to an object, like in the following example:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("object_reference")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("SOME_OBJECT")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("object_reference")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("some_property")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Then while "),t("code",[a._v("closure")]),a._v(" cannot change what "),t("code",[a._v("object_reference")]),a._v(" points to, it can interact with "),t("code",[a._v("object_references")]),a._v("'s properties or methods, which can lead to changes in the state of the "),t("code",[a._v("SOME_OBJECT")]),a._v(" object referenced by "),t("code",[a._v("object_reference")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"arithmetic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic"}},[a._v("#")]),a._v(" arithmetic")]),a._v(" "),t("p",[a._v("Arithmetic expressions allow you to perform mathematical calculations using operators such as "),t("code",[a._v("+")]),a._v(", "),t("code",[a._v("-")]),a._v(", "),t("code",[a._v("*")]),a._v(", "),t("code",[a._v("/")]),a._v(", and "),t("code",[a._v("%")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("sum")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("           "),t("span",{staticClass:"token comment"},[a._v("// Addition")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("difference")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("-")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("    "),t("span",{staticClass:"token comment"},[a._v("// Subtraction")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("product")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("*")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("       "),t("span",{staticClass:"token comment"},[a._v("// Multiplication")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("quotient")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("/")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("      "),t("span",{staticClass:"token comment"},[a._v("// Division")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("remainder")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("%")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("     "),t("span",{staticClass:"token comment"},[a._v("// Modulo (remainder)")]),a._v("\n")])])]),t("h2",{attrs:{id:"comparison"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparison"}},[a._v("#")]),a._v(" comparison")]),a._v(" "),t("p",[a._v("Comparison expressions allow you to compare values using operators such as "),t("code",[a._v("==")]),a._v(", "),t("code",[a._v("!=")]),a._v(", "),t("code",[a._v("<")]),a._v(", "),t("code",[a._v(">")]),a._v(", "),t("code",[a._v("<=")]),a._v(", and "),t("code",[a._v(">=")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("equal")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("==")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("              "),t("span",{staticClass:"token comment"},[a._v("// Equality")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("not_equal")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("!=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("         "),t("span",{staticClass:"token comment"},[a._v("// Inequality")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("less_than")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("          "),t("span",{staticClass:"token comment"},[a._v("// Less than")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("greater_than")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("       "),t("span",{staticClass:"token comment"},[a._v("// Greater than")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("less_than_or_equal")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// Less than or equal to")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("greater_than_or_equal")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// Greater than or equal to")]),a._v("\n")])])]),t("h2",{attrs:{id:"short-circuit-logical"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short-circuit-logical"}},[a._v("#")]),a._v(" short circuit logical")]),a._v(" "),t("p",[a._v("Logical expressions allow you to combine or negate boolean values using the "),t("code",[a._v("&&")]),a._v(" (logical AND), "),t("code",[a._v("||")]),a._v(" (logical OR), and "),t("code",[a._v("!")]),a._v(" (logical NOT) operators.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("logical_and")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token boolean"},[a._v("true")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("/\\")]),a._v(" "),t("span",{staticClass:"token boolean"},[a._v("false")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("    "),t("span",{staticClass:"token comment"},[a._v("// Logical AND")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("logical_or")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token boolean"},[a._v("true")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("\\/")]),a._v(" "),t("span",{staticClass:"token boolean"},[a._v("false")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("     "),t("span",{staticClass:"token comment"},[a._v("// Logical OR")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("logical_not")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("!")]),t("span",{staticClass:"token boolean"},[a._v("true")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("            "),t("span",{staticClass:"token comment"},[a._v("// Logical NOT")]),a._v("\n")])])]),t("p",[a._v("Evaluation stops as soon as the result is known")]),a._v(" "),t("h2",{attrs:{id:"conditional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditional"}},[a._v("#")]),a._v(" conditional")]),a._v(" "),t("p",[a._v("Conditional expressions allow you to evaluate different expressions based on a condition using the "),t("code",[a._v("if")]),a._v("-"),t("code",[a._v("then")]),a._v("-"),t("code",[a._v("else")]),a._v(" construct.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("max")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("if")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("a")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("b")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("then")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("a")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("else")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("b")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("fi")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"function-call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-call"}},[a._v("#")]),a._v(" function call")]),a._v(" "),t("p",[a._v("Function call expressions allow you to invoke functions and methods by providing the necessary arguments.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token function"},[a._v("sum")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"property-access"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#property-access"}},[a._v("#")]),a._v(" property access")]),a._v(" "),t("p",[a._v("Property access expressions allow you to access the properties of an object using the dot notation.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("length")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"Hello"')]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("length")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"indexer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexer"}},[a._v("#")]),a._v(" indexer")]),a._v(" "),t("p",[a._v("Indexer expressions allow you to access elements of an array or collection using square brackets.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("first_element")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[a._v("#")]),a._v(" constructor")]),a._v(" "),t("p",[a._v("Constructor expressions allow you to create new instances of classes or structs by invoking their constructors.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("point")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("POINT")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("20")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"type-cast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-cast"}},[a._v("#")]),a._v(" type cast")]),a._v(" "),t("p",[a._v("Type cast expressions allow you to explicitly convert a value from one type to another using the "),t("code",[a._v("cast")]),a._v(" keyword.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("integer_value")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("cast")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("3.14")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("These are the main types of expressions in ghūl. They can be combined and nested to form more complex expressions and statements:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token function"},[a._v("entry")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("is")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("sum")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("product")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("*")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("is_greater")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n    "),t("span",{staticClass:"token control"},[a._v("if")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("is_greater")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("then")]),a._v("\n        "),t("span",{staticClass:"token class-name"},[a._v("IO")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token class-name"},[a._v("Std")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("write_line")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"x is greater than y"')]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("else")]),a._v("\n        "),t("span",{staticClass:"token class-name"},[a._v("IO")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token class-name"},[a._v("Std")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("write_line")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"x is not greater than y"')]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("fi")]),a._v("\n\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("numbers")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("first_number")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("numbers")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n    "),t("span",{staticClass:"token class-name"},[a._v("IO")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token class-name"},[a._v("Std")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("write_line")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"The first number is: '),t("span",{staticClass:"token interpolation"},[t("span",{staticClass:"token interpolation-punctuation punctuation"},[a._v("{")]),t("span",{staticClass:"token variable"},[a._v("first_number")]),t("span",{staticClass:"token interpolation-punctuation punctuation"},[a._v("}")])]),a._v('"')]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("si")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);