(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{325:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"language-basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#language-basics"}},[a._v("#")]),a._v(" language basics")]),a._v(" "),t("h2",{attrs:{id:"data-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[a._v("#")]),a._v(" data types")]),a._v(" "),t("h3",{attrs:{id:"primitive-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#primitive-types"}},[a._v("#")]),a._v(" primitive types")]),a._v(" "),t("p",[a._v("ghūl primitive types include various signed and unsigned integers, single and double precision floating point, and boolean.")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("byte")]),a._v(": signed 8-bit integer")]),a._v(" "),t("li",[t("code",[a._v("ubyte")]),a._v(": unsigned 8-bit integer")]),a._v(" "),t("li",[t("code",[a._v("short")]),a._v(": signed 16-bit integer")]),a._v(" "),t("li",[t("code",[a._v("ushort")]),a._v(": unsigned 16-bit integer")]),a._v(" "),t("li",[t("code",[a._v("int")]),a._v(": signed 32-bit integer")]),a._v(" "),t("li",[t("code",[a._v("uint")]),a._v(": unsigned 32-bit integer")]),a._v(" "),t("li",[t("code",[a._v("long")]),a._v(": signed 64-bit integer")]),a._v(" "),t("li",[t("code",[a._v("ulong")]),a._v(": unsigned 64-bit integer")]),a._v(" "),t("li",[t("code",[a._v("word")]),a._v(": signed pointer length integer")]),a._v(" "),t("li",[t("code",[a._v("uword")]),a._v(": unsigned pointer length integer")]),a._v(" "),t("li",[t("code",[a._v("void")]),a._v(": the absence of any value")])]),a._v(" "),t("p",[a._v("As usual for languages targeting .NET, these ghūl primitive types are all actually aliases for standard .NET types defined in the "),t("code",[a._v("System")]),a._v(" namespace, such as "),t("code",[a._v("System.Int32")]),a._v(". It is conventional to use the ghūl types rather the raw .NET type names, although technically they are interchangeable.")]),a._v(" "),t("h3",{attrs:{id:"composite-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composite-types"}},[a._v("#")]),a._v(" composite types")]),a._v(" "),t("p",[a._v("ghūl supports various composite types.")]),a._v(" "),t("h4",{attrs:{id:"arrays"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[a._v("#")]),a._v(" arrays")]),a._v(" "),t("p",[a._v("Array types are composed with the "),t("code",[a._v("[]")]),a._v(" postfix type operator")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// a one dimensional array of integers")]),a._v("\n"),t("span",{staticClass:"token class-name"},[a._v("string")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// a one dimensional array of strings")]),a._v("\n")])])]),t("p",[a._v("ghūl does not have multi-dimensional arrays, but jagged array types can be composed using multiple "),t("code",[a._v("[]")])]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// an array where each element can hold an array of integers")]),a._v("\n"),t("span",{staticClass:"token class-name"},[a._v("string")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// an array where each element can hold an array of strings")]),a._v("\n")])])]),t("p",[a._v("Values of array type are references to the underlying array object, and can be null")]),a._v(" "),t("p",[a._v("Objects of array type can be constructed with "),t("code",[a._v("new type[](size)")])]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("array")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("new")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Note there is no special array constructor syntax: the constructor parameter is in parentheses after the type as normal.")]),a._v(" "),t("p",[a._v("Elements of arrays can be accessed using the indexing operator "),t("code",[a._v("array[index]")])]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("a")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("new")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token variable"},[a._v("a")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token variable"},[a._v("a")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("In practice, use of arrays is fairly rare in ghūl. Use of collection traits like "),t("code",[a._v("List[T]")]),a._v(" or "),t("code",[a._v("MutableList[T]")]),a._v(" is preferred.")]),a._v(" "),t("h4",{attrs:{id:"tuples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuples"}},[a._v("#")]),a._v(" tuples")]),a._v(" "),t("p",[a._v("Tuples in ghūl are defined using parentheses ( and ). They can encapsulate multiple types.")]),a._v(" "),t("p",[a._v("The general syntax for a tuple type is "),t("code",[a._v("(type1, type2, ...)")]),a._v(". For example, "),t("code",[a._v("(int, string)")]),a._v(" represents a tuple with an integer and a string.")]),a._v(" "),t("p",[a._v("Elements in a tuple can be named. The syntax for a tuple type with named elements is "),t("code",[a._v("(s: string, i: int)")]),a._v(", where s and i are the names of the tuple elements. If tuple elements are not explicitly named, they are assigned names consisting of a back-tick followed by an index.")]),a._v(" "),t("p",[a._v("Tuples in ghūl are structurally typed. A tuple value is assignment compatible with a tuple type only if the types of all of its elements are identical to the element types of the target tuple type (i.e. co-variance is not supported)")]),a._v(" "),t("h3",{attrs:{id:"type-conversions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-conversions"}},[a._v("#")]),a._v(" type conversions")]),a._v(" "),t("p",[a._v("ghūl does not perform implicit type conversion (coercion) between scalar types; all scalar type conversions must be explicitly cast. However, ghūl supports polymorphic behavior by allowing upcasting, where instances of derived classes or interfaces can be automatically coerced to compatible ancestor types in the class/interface hierarchy.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("d")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0d "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0d"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// OK both addends are type double")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("e")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0d "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// Compile time error because addends are mixed types (double vs int)")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("e")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0d "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("cast")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("double")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// OK with explicit cast")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("o")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("object")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"hello"')]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v('// OK "hello" is a string, and string is derived from object')]),a._v("\n")])])]),t("h2",{attrs:{id:"variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[a._v("#")]),a._v(" variables")]),a._v(" "),t("p",[a._v("ghūl has three kinds of variables: locals declared within the body of a function or method, function or method arguments and captured values.")]),a._v(" "),t("h3",{attrs:{id:"locals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#locals"}},[a._v("#")]),a._v(" locals")]),a._v(" "),t("p",[a._v("Local variables are declared with "),t("code",[a._v("let")]),a._v(" followed by the variable name, plus a type and/or an initializer.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1234")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("j")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("k")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5678")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Local variables with no explicit initializer are initialized to the default value for their type (zero, false, or null)")]),a._v(" "),t("h3",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[a._v("#")]),a._v(" arguments")]),a._v(" "),t("p",[a._v("Arguments will be covered in detail with functions and methods, but the basic form is the argument name followed by its type.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token function"},[a._v("some_function")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("argument")]),a._v(": "),t("span",{staticClass:"token variable"},[a._v("type")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v("\n")])])]),t("h3",{attrs:{id:"captured-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#captured-values"}},[a._v("#")]),a._v(" captured values")]),a._v(" "),t("p",[a._v("Captured values will be covered with function literals. They are not explicitly defined but inferred from context.")]),a._v(" "),t("h3",{attrs:{id:"scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[a._v("#")]),a._v(" scope")]),a._v(" "),t("p",[a._v("The scope of all variable definitions is from the point of declaration to the end of the innermost block that contains the declaration. Blocks will be covered later, but generally a block is a control flow statement or a function or method body.")]),a._v(" "),t("h3",{attrs:{id:"type-inference-and-explicit-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-inference-and-explicit-types"}},[a._v("#")]),a._v(" type inference and explicit types")]),a._v(" "),t("p",[a._v("ghūl can infer the type of local variables from their initializer if present. It's a compile time error if a variable doesn't have either an explicit type or an initializer, or if an initializer is not assignment compatible with any explicit type.")]),a._v(" "),t("h2",{attrs:{id:"literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[a._v("#")]),a._v(" literals")]),a._v(" "),t("h3",{attrs:{id:"integers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#integers"}},[a._v("#")]),a._v(" integers")]),a._v(" "),t("p",[a._v("Integer literals consist of an optional radix (base), followed by a sequence of digits with optional underscores for readability, followed by a dot and a decimal fraction and/or exponent (for floating point numbers) and finally a type suffix.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 12_345_678"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// int")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hex")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 0x1234_ABCD"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// int")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("long")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 1_000_000_000_000_000L"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// long")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hex_unsigned_long")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 0x1234_5678__9ABC_DEF0_UL"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// ulong")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("b")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 99b"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// byte")]),a._v("\n")])])]),t("h3",{attrs:{id:"char"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[a._v("#")]),a._v(" char")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("c")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v("'c'")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("u_macron")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v("'ū'")]),a._v("\n")])])]),t("h3",{attrs:{id:"floating-point"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#floating-point"}},[a._v("#")]),a._v(" floating point")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("s")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123.456")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// single")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("t")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("456E5"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// single")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("d")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("123")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("456D"),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// double")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("e")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" 123_456_789_000"),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("0D "),t("span",{staticClass:"token comment"},[a._v("// double")]),a._v("\n")])])]),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" string")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("hello_world")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"Hello World!"')]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("unicode")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"ghūl programming language"')]),a._v("\n")])])]),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[a._v("#")]),a._v(" list")]),a._v(" "),t("p",[a._v("List literals are constructed from a comma separated list of element values enclosed in "),t("code",[a._v("[")]),a._v(" and "),t("code",[a._v("]")]),a._v(". The list element type is inferred as the most specific type compatible with all elements (which may be "),t("code",[a._v("object")]),a._v("). The resulting list type is "),t("code",[a._v("Collections.List[E]")]),a._v(" where "),t("code",[a._v("E")]),a._v(" is the inferred element type. The constructed list object is an array, but this type is not exposed and should not be relied on.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("animals")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token string"},[a._v('"frog"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"bat"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"elephant"')]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[string]")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token string"},[a._v('"frog"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1234")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("12.5")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[object]")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("lists")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("6")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("7")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("7")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// List[List[int]]")]),a._v("\n")])])]),t("h3",{attrs:{id:"tuple"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple"}},[a._v("#")]),a._v(" tuple")]),a._v(" "),t("p",[a._v("Tuple literals are constructed from a comma separated list of elements enclosed in "),t("code",[a._v("(")]),a._v(" and "),t("code",[a._v(")")]),a._v(". Each element can be a bare value or a named value, and each element can optionally specify a type. Where explicit types are omitted, element types will be inferred.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("path")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"/tmp/my-file.txt"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1234")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// (path: string, id: int)")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("path")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("id")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("path_with_id")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("id")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("If tuple elements are not explicitly named, they are assigned names consisting of a back-tick followed by an index")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"thing"')]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("12.34")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// (string, int) with element names `0 and `1")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("name")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("`"),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("weight")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("things")]),t("span",{staticClass:"token operator"},[a._v(".")]),a._v("`"),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[a._v("#")]),a._v(" function")]),a._v(" "),t("p",[a._v("Function literals are constructed from an parenthesized argument list, a return type, and a return expression or a function body. If there is only one argument, no parentheses are needed.")]),a._v(" "),t("h4",{attrs:{id:"expression-body-function-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expression-body-function-literal"}},[a._v("#")]),a._v(" expression body function literal")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("simple_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h4",{attrs:{id:"block-body-function-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#block-body-function-literal"}},[a._v("#")]),a._v(" block body function literal")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("complex_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("is")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("return")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("si")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h4",{attrs:{id:"type-inference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-inference"}},[a._v("#")]),a._v(" type inference")]),a._v(" "),t("p",[a._v("Return type can usually be omitted provided it can be inferred from the type of the expression body or any values returned from the block body")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("simple_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("complex_add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),a._v(": "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("is")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("x")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("y")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n    "),t("span",{staticClass:"token control"},[a._v("return")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("result")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("si")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Argument types usually can be inferred if the function literal is being passed into a function.")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("5")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token variable"},[a._v("list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("|")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("filter")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("element")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("element")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// type of element is inferred to be int")]),a._v("\n")])])]),t("h4",{attrs:{id:"capturing-and-closure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#capturing-and-closure"}},[a._v("#")]),a._v(" capturing and closure")]),a._v(" "),t("p",[a._v("In ghūl, function literals can capture and utilize values from their surrounding lexical scope, thereby forming closures. It's important to note that what are captured are the values of variables at the point of the function literal's creation, rather than the variables themselves. This distinction is crucial for understanding how closures work in ghūl.")]),a._v(" "),t("p",[a._v("When a function literal is constructed, it creates read-only snapshots of the values from the outer scopes that are referenced within it. These snapshots are immutable in the sense that the literal cannot alter the captured values. However, the immutability applies to the value's binding, not necessarily to the value itself. In ghūl, like in many .NET languages, a value could be a reference to an object. While the reference is immutable and remains constant throughout the lifetime of the function literal, the object it points to can still be mutable. This means that if the captured value is an object reference, the object's state can be modified either by the closure itself or by other code, but the reference held by the closure will always point to the same object.")]),a._v(" "),t("p",[a._v("Consider a simple closure that captures a loop variable:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("g")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("In this case, "),t("code",[a._v("g")]),a._v(" captures the value of "),t("code",[a._v("i")]),a._v(" at the moment of "),t("code",[a._v("g")]),a._v("'s creation. The variable "),t("code",[a._v("i")]),a._v(" itself is not captured; only its value at a specific point in time is. Here is a more complete example:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token comment"},[a._v("// Define a list to hold the closures:")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("new")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("LIST")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("->")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("int")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token comment"},[a._v("// Iterate over an integer range:")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("for")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("in")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),a._v("::"),t("span",{staticClass:"token number"},[a._v("10")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("do")]),a._v("\n    "),t("span",{staticClass:"token comment"},[a._v("// Create a closure that captures the current value of i:")]),a._v("\n    "),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n    "),t("span",{staticClass:"token comment"},[a._v("// Add the closure to the list:")]),a._v("\n    "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token function"},[a._v("add")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token variable"},[a._v("closure")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("od")]),a._v("\n\n"),t("span",{staticClass:"token comment"},[a._v("// Each closure captured the value of i at the time of its creation:")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("for")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("in")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure_list")]),a._v(" "),t("span",{staticClass:"token control"},[a._v("do")]),a._v("\n    "),t("span",{staticClass:"token function"},[a._v("write_line")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token string"},[a._v('"Closure captured value: "')]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token function"},[a._v("closure")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token control"},[a._v("od")]),a._v("\n")])])]),t("p",[a._v("If the captured value is a reference to an object, like in the following example:")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("object_reference")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token keyword"},[a._v("new")]),a._v(" "),t("span",{staticClass:"token class-name"},[a._v("SOME_OBJECT")]),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("closure")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("(")]),t("span",{staticClass:"token punctuation"},[a._v(")")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=>")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("object_reference")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("some_property")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("Then while "),t("code",[a._v("closure")]),a._v(" cannot change what "),t("code",[a._v("object_reference")]),a._v(" points to, it can interact with "),t("code",[a._v("object_references")]),a._v("'s properties or methods, which can lead to changes in the state of the "),t("code",[a._v("SOME_OBJECT")]),a._v(" object referenced by "),t("code",[a._v("object_reference")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"operators-and-expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#operators-and-expressions"}},[a._v("#")]),a._v(" operators and expressions")]),a._v(" "),t("h3",{attrs:{id:"arithmetic-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operators"}},[a._v("#")]),a._v(" arithmetic operators")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("add")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("sub")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("-")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("mul")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("*")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("div")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("12")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("/")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("mod")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("13")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("%")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"comparison-and-logical-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparison-and-logical-operators"}},[a._v("#")]),a._v(" comparison and logical operators")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("gt")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// true")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("gte")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// true")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("lt")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// false")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("lte")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// true")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("eq")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("==")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// false")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("neq")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("1")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("!=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// true")]),a._v("\n")])])]),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token number"},[a._v("1")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("2")]),t("span",{staticClass:"token punctuation"},[a._v(",")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("index")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("4")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("search_value")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("3")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("and_then")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("index")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("<")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("count")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("/\\")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token variable"},[a._v("index")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("==")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("search_value")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// false")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("or_else")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("index")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v(">=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("count")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("\\/")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("list")]),t("span",{staticClass:"token punctuation"},[a._v("[")]),t("span",{staticClass:"token variable"},[a._v("index")]),t("span",{staticClass:"token punctuation"},[a._v("]")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("!=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("search_value")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v(" "),t("span",{staticClass:"token comment"},[a._v("// true")]),a._v("\n")])])]),t("h2",{attrs:{id:"assignment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignment"}},[a._v("#")]),a._v(" assignment")]),a._v(" "),t("p",[a._v("variables and properties can be updated via assignment statements")]),a._v(" "),t("div",{staticClass:"language-ghul extra-class"},[t("pre",{staticClass:"language-ghul"},[t("code",{staticClass:"language-ghul"},[t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("0")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("j")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token number"},[a._v("10")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token keyword"},[a._v("let")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("s")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('"Hello"')]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("j")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n"),t("span",{staticClass:"token variable"},[a._v("s")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("s")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token string"},[a._v('" World!"')]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n\n"),t("span",{staticClass:"token variable"},[a._v("thing")]),t("span",{staticClass:"token operator"},[a._v(".")]),t("span",{staticClass:"token variable"},[a._v("property")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("=")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("i")]),a._v(" "),t("span",{staticClass:"token operator"},[a._v("+")]),a._v(" "),t("span",{staticClass:"token variable"},[a._v("j")]),t("span",{staticClass:"token punctuation"},[a._v(";")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);