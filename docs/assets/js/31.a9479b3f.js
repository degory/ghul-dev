(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{314:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expressions"}},[s._v("#")]),s._v(" expressions")]),s._v(" "),a("p",[s._v("Expressions in ghÅ«l are constructs that evaluate to a value. They can be used to perform calculations, make comparisons, and combine values in various ways.")]),s._v(" "),a("h2",{attrs:{id:"literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[s._v("#")]),s._v(" literals")]),s._v(" "),a("p",[s._v("Literal expressions represent fixed values of a specific type.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("integer_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("42")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("floating_point_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3.14")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("string_literal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Hello, world!"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("boolean_literal_true")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("true")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("boolean_literal_false")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("false")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"arithmetic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic"}},[s._v("#")]),s._v(" arithmetic")]),s._v(" "),a("p",[s._v("Arithmetic expressions allow you to perform mathematical calculations using operators such as "),a("code",[s._v("+")]),s._v(", "),a("code",[s._v("-")]),s._v(", "),a("code",[s._v("*")]),s._v(", "),a("code",[s._v("/")]),s._v(", and "),a("code",[s._v("%")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("sum")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("           "),a("span",{staticClass:"token comment"},[s._v("// Addition")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("difference")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("-")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("    "),a("span",{staticClass:"token comment"},[s._v("// Subtraction")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("product")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("       "),a("span",{staticClass:"token comment"},[s._v("// Multiplication")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("quotient")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("/")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("      "),a("span",{staticClass:"token comment"},[s._v("// Division")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("remainder")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("%")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("     "),a("span",{staticClass:"token comment"},[s._v("// Modulo (remainder)")]),s._v("\n")])])]),a("h2",{attrs:{id:"comparison"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison"}},[s._v("#")]),s._v(" comparison")]),s._v(" "),a("p",[s._v("Comparison expressions allow you to compare values using operators such as "),a("code",[s._v("==")]),s._v(", "),a("code",[s._v("!=")]),s._v(", "),a("code",[s._v("<")]),s._v(", "),a("code",[s._v(">")]),s._v(", "),a("code",[s._v("<=")]),s._v(", and "),a("code",[s._v(">=")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("equal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("==")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("              "),a("span",{staticClass:"token comment"},[s._v("// Equality")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("not_equal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("!=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("         "),a("span",{staticClass:"token comment"},[s._v("// Inequality")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("less_than")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("          "),a("span",{staticClass:"token comment"},[s._v("// Less than")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("greater_than")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("       "),a("span",{staticClass:"token comment"},[s._v("// Greater than")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("less_than_or_equal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("<=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// Less than or equal to")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("greater_than_or_equal")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// Greater than or equal to")]),s._v("\n")])])]),a("h2",{attrs:{id:"short-circuit-logical"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#short-circuit-logical"}},[s._v("#")]),s._v(" short circuit logical")]),s._v(" "),a("p",[s._v("Logical expressions allow you to combine or negate boolean values using the "),a("code",[s._v("&&")]),s._v(" (logical AND), "),a("code",[s._v("||")]),s._v(" (logical OR), and "),a("code",[s._v("!")]),s._v(" (logical NOT) operators.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("logical_and")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("true")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("/\\")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("false")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("    "),a("span",{staticClass:"token comment"},[s._v("// Logical AND")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("logical_or")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("true")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("\\/")]),s._v(" "),a("span",{staticClass:"token boolean"},[s._v("false")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("     "),a("span",{staticClass:"token comment"},[s._v("// Logical OR")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("logical_not")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("!")]),a("span",{staticClass:"token boolean"},[s._v("true")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("            "),a("span",{staticClass:"token comment"},[s._v("// Logical NOT")]),s._v("\n")])])]),a("p",[s._v("Evaluation stops as soon as the result is known")]),s._v(" "),a("h2",{attrs:{id:"conditional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conditional"}},[s._v("#")]),s._v(" conditional")]),s._v(" "),a("p",[s._v("Conditional expressions allow you to evaluate different expressions based on a condition using the "),a("code",[s._v("if")]),s._v("-"),a("code",[s._v("then")]),s._v("-"),a("code",[s._v("else")]),s._v(" construct.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("max")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("a")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("b")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("a")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("else")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("b")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("fi")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"function-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-call"}},[s._v("#")]),s._v(" function call")]),s._v(" "),a("p",[s._v("Function call expressions allow you to invoke functions and methods by providing the necessary arguments.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("result")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token function"},[s._v("sum")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"property-access"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#property-access"}},[s._v("#")]),s._v(" property access")]),s._v(" "),a("p",[s._v("Property access expressions allow you to access the properties of an object using the dot notation.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("length")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"Hello"')]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("length")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"indexer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexer"}},[s._v("#")]),s._v(" indexer")]),s._v(" "),a("p",[s._v("Indexer expressions allow you to access elements of an array or collection using square brackets.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("first_element")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[s._v("#")]),s._v(" constructor")]),s._v(" "),a("p",[s._v("Constructor expressions allow you to create new instances of classes or structs by invoking their constructors.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("point")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("20")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"type-cast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-cast"}},[s._v("#")]),s._v(" type cast")]),s._v(" "),a("p",[s._v("Type cast expressions allow you to explicitly convert a value from one type to another using the "),a("code",[s._v("cast")]),s._v(" keyword.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("integer_value")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("cast")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("3.14")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("These are the main types of expressions in ghÅ«l. They can be combined and nested to form more complex expressions and statements:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("entry")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("sum")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("product")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("is_greater")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("is_greater")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n        "),a("span",{staticClass:"token class-name"},[s._v("IO")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Std")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"x is greater than y"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token control"},[s._v("else")]),s._v("\n        "),a("span",{staticClass:"token class-name"},[s._v("IO")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Std")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"x is not greater than y"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token control"},[s._v("fi")]),s._v("\n\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("numbers")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("2")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("3")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("4")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("first_number")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("numbers")]),a("span",{staticClass:"token punctuation"},[s._v("[")]),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v("]")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token class-name"},[s._v("IO")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Std")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"The first number is: '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("first_number")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);