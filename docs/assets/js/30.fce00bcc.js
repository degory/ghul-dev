(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{312:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[s._v("#")]),s._v(" definitions")]),s._v(" "),a("h2",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[s._v("#")]),s._v(" variables")]),s._v(" "),a("p",[s._v("In ghūl variables are introduced with the "),a("code",[s._v("let")]),s._v(" keyword:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("The compiler will infer the type from the initializer, if there is one. If there is no initializer then a type must be given")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("If both an initializer and a type are present, then the initializer must be assignment compatible with the type")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("o")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("object")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"a string"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Multiple variables can be defined in the same "),a("code",[s._v("let")]),s._v(" statement, including a mix of types and with or without initializers")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initialize_now")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("123")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initialize_later")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("why_are_we_doing_this")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"I don\'t know"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Variables may only be defined within functions, methods or property bodies")]),s._v(" "),a("p",[s._v("Variables names should be in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[s._v("#")]),s._v(" functions")]),s._v(" "),a("p",[s._v("In ghūl functions consist of a name and a parenthesised formal arguments list, followed by a return type, and then either a return expression or a function body:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("sum_two_ints")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token function"},[s._v("sum_three_ints")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("k")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token control"},[s._v("return")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("k")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Functions can only be defined at global scope")]),s._v(" "),a("p",[s._v("Functions can be generic, which will be covered later")]),s._v(" "),a("p",[s._v("Function names should be in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[s._v("#")]),s._v(" arguments")]),s._v(" "),a("p",[s._v("Arguments consist of a name followed by a type. The type is mandatory as the compiler cannot infer types here.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("what")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("why")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("to")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[s._v("#")]),s._v(" classes")]),s._v(" "),a("p",[s._v("Classes consist of a name optionally followed by a superclass name and the types of any traits implemented, and then the class body.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("THING")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("A class defines a new reference type, instances of which are assignment compatible with its superclass type and any traits it implements.")]),s._v(" "),a("p",[s._v("Classes can only be defined at global scope")]),s._v(" "),a("p",[s._v("Concrete class names should be in "),a("code",[s._v("MACRO_CASE")]),s._v(". Abstract class names should be in "),a("code",[s._v("PascalCase")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"structs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs"}},[s._v("#")]),s._v(" structs")]),s._v(" "),a("p",[s._v("Structs consist of a name, then the types of any traits implemented, and then the struct body.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token variable"},[s._v("struct")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("A struct defines a new value type.")]),s._v(" "),a("p",[s._v("Struct names should be in "),a("code",[s._v("MACRO_CASE")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"traits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traits"}},[s._v("#")]),s._v(" traits")]),s._v(" "),a("p",[s._v("A trait consists of a name, the types of any parent traits that must also be implemented, and then the trait body.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("trait")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Countable")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("count")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Trait methods nor properties must have empty bodies")]),s._v(" "),a("p",[s._v("Traits can only be defined at global scope")]),s._v(" "),a("p",[s._v("Trait names should be in "),a("code",[s._v("PascalCase")]),s._v(";")]),s._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[s._v("#")]),s._v(" properties")]),s._v(" "),a("p",[s._v("A property consists of the property name followed by the property's type and, optionally, bodies for getter and setter methods.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Sized")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("_size")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token variable"},[s._v("size")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("size")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n            "),a("span",{staticClass:"token control"},[s._v("assert")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n            "),a("span",{staticClass:"token variable"},[s._v("_size")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n")])])]),a("p",[s._v("Public properties with no getter or setter are automatically backed by a hidden field. Private properties with no getter or setter are implemented as just a field.")]),s._v(" "),a("p",[s._v("Property names should be in "),a("code",[s._v("snake_case")]),s._v(".")]),s._v(" "),a("p",[s._v("Properties can only be definied within classes, structs and traits.")]),s._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[s._v("#")]),s._v(" methods")]),s._v(" "),a("p",[s._v("Methods are syntactcally the same as functions, except they are defined within classes, structs or traits.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("SCALER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("_scale")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("scale")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("scale")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n")])])]),a("p",[s._v("As with functions, methods should be named in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"constructors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructors"}},[s._v("#")]),s._v(" constructors")]),s._v(" "),a("p",[s._v("In ghūl methods named "),a("code",[s._v("init")]),s._v(" are constructors. When an object is constructed using "),a("code",[s._v("new")]),s._v(" the corresponding "),a("code",[s._v("init")]),s._v(" method will be called")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("initial_count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initial_count")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("c")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// calls the parameterless overload of init()")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("d")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("50")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// calls init(initial_count: int)")]),s._v("\n")])])]),a("p",[s._v("Constructors can only be defined in classes and structs")]),s._v(" "),a("h2",{attrs:{id:"namespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespaces"}},[s._v("#")]),s._v(" namespaces")]),s._v(" "),a("p",[s._v("Namespaces are introduced with the "),a("code",[s._v("namespace")]),s._v(" keyword followed by the namespace name and then the namespace body.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Namespaces may be nested inside other namespaces")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Outer")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Inner")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n            "),a("span",{staticClass:"token function"},[s._v("stuff")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("A dotted namespace name is shorthand for nesting namespaces")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token function"},[s._v("stuff")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);