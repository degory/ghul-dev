(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{313:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"definitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[s._v("#")]),s._v(" definitions")]),s._v(" "),a("h2",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[s._v("#")]),s._v(" variables")]),s._v(" "),a("p",[s._v("In ghūl variables are introduced with the "),a("code",[s._v("let")]),s._v(" keyword:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("10")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("The compiler will infer the type from the initializer, if there is one. If there is no initializer, then a type must be explicitly specified.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("If both an initializer and a type are present, then the initializer must be assignment compatible with the type")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("o")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("object")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"a string"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Multiple variables can be defined in the same "),a("code",[s._v("let")]),s._v(" statement, including a mix of types and with or without initializers")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initialize_now")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("123")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initialize_later")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("why_are_we_doing_this")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"I don\'t know"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Variables may only be defined within functions, methods or property bodies. Variables names should be in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[s._v("#")]),s._v(" functions")]),s._v(" "),a("p",[s._v("In ghūl functions consist of a name and a parenthesized formal arguments list, followed by a return type, and then either a return expression or a function body:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("sum_two_ints")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token function"},[s._v("sum_three_ints")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("k")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token control"},[s._v("return")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("i")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("j")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("+")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("k")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[a("code",[s._v("=>")]),s._v(" introduces a single-expression body, while the "),a("code",[s._v("is")]),s._v(" and "),a("code",[s._v("si")]),s._v(" keywords are used to delimit block bodies.")]),s._v(" "),a("p",[s._v("Functions can only be defined at global scope. Functions can be generic, which will be covered later. Function names should be in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[s._v("#")]),s._v(" arguments")]),s._v(" "),a("p",[s._v("Arguments consist of a name followed by a type. The type is mandatory as the compiler cannot infer types here.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("what")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("why")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("to")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[s._v("#")]),s._v(" classes")]),s._v(" "),a("p",[s._v("Classes consist of a name optionally followed by a superclass name and the types of any traits implemented, and then the class body. The class body is delimited by keywords "),a("code",[s._v("is")]),s._v(" and "),a("code",[s._v("si")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("THING")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// class body")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("A class defines a new reference type, instances of which are assignment compatible with its superclass type and any traits it implements.")]),s._v(" "),a("p",[s._v("Instances of classes are created via a constructor expression, which consists of a type expression followed by a parenthesis delimited list of actual constructor arguments. For a class, the type expression is simply the class name, qualified with any namespaces if needed:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("THING")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// constructor")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("a_thing")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("THING")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Classes can only be defined at global scope. Classes can be generic, which will be covered later. Concrete class names should be in "),a("code",[s._v("MACRO_CASE")]),s._v(". Abstract class names should be in "),a("code",[s._v("PascalCase")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"structs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs"}},[s._v("#")]),s._v(" structs")]),s._v(" "),a("p",[s._v("Structs consist of a name, then the types of any traits implemented, and then the struct body again enclosed in "),a("code",[s._v("is")]),s._v(" / "),a("code",[s._v("si")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("struct")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("self")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("x")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("x")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("self")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("y")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("y")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Structs are constructed the same way as classes, with a constructor expression:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("origin")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("right")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("1")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// or up, or down, or even left, depending on your co-ordinate system!")]),s._v("\n")])])]),a("p",[s._v("A struct defines a new value type, which means any values that the struct encapsulates are collected together as a new kind of value: copying the struct involves copying all the encapsulated values and the built in equality operator "),a("code",[s._v("==")]),s._v(" performs a memberwise equality check:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("zero_zero")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("POINT")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token operator"},[s._v(".")]),s._v("0D"),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token control"},[s._v("assert")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("origin")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("==")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("zero_zero")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("assert")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("origin")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("!=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("right")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Structs can only be defined at global scope. Structs can be generic, which will be covered later. Struct names should be in "),a("code",[s._v("MACRO_CASE")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"traits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traits"}},[s._v("#")]),s._v(" traits")]),s._v(" "),a("p",[s._v("A trait consists of a name, the types of any parent traits that must also be implemented, and then the trait body:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("trait")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Printable")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("print")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Traits are similar to interfaces in other languages. The methods and properties of the trait must be implemented by any class that inherits from the trait:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("BOOK")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Printable")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("title")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("author")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("title")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("author")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("self")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("title")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("title")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("self")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("author")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("author")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("print")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Title: '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("title")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v(", Author: "),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("author")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Traits can only be defined at global scope. Trait methods and properties must be made abstract by giving them empty bodies (see issue "),a("a",{attrs:{href:"https://github.com/degory/ghul/issues/285",target:"_blank",rel:"noopener noreferrer"}},[s._v("#285"),a("OutboundLink")],1),s._v("). Trait names should be in "),a("code",[s._v("PascalCase")]),s._v(";")]),s._v(" "),a("h2",{attrs:{id:"unions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unions"}},[s._v("#")]),s._v(" unions")]),s._v(" "),a("p",[s._v("A union consists of a name and then a union body, which contains one or more variants. Each variant has a name, and then an optional list of fields:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("union")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token class-name"},[s._v("NODE")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("left")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("right")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token class-name"},[s._v("LEAF")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Unions are a reference type. A reference of union type can point to only one variant at a time. The active variant can be determined by checking the union's tag properties. These are auto named by convention based on the variant names.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("tree")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("NODE")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("LEAF")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("123")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("LEAF")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("456")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("leaf")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("LEAF")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("123")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("is_node")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"have tree node"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("elif")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("is_leaf")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"have tree leaf"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("fi")]),s._v("\n")])])]),a("p",[s._v("The active variant can be accessed by name, which returns either the variant instance (if it holds multiple fields), or just the field value if it holds a single field. Unit variants (those with no fields) cannot be accessed as they have no value.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token control"},[s._v("if")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("is_node")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"have a tree with left '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("node")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("left")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v(" and right "),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("node")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("right")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("elif")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("is_leaf")]),s._v(" "),a("span",{staticClass:"token control"},[s._v("then")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"have a leaf with value '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("tree")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("leaf")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// note we don't need tree.leaf.value here")]),s._v("\n"),a("span",{staticClass:"token control"},[s._v("fi")]),s._v("\n")])])]),a("p",[s._v("Union names should be in "),a("code",[s._v("PascalCase")]),s._v(" and variant names should be in "),a("code",[s._v("MACRO_CASE")])]),s._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[s._v("#")]),s._v(" properties")]),s._v(" "),a("p",[s._v("A property consists of the property name followed by the property's type and, optionally, bodies for getter and setter methods.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Sized")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("_size")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token variable"},[s._v("size")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("size")]),a("span",{staticClass:"token punctuation"},[s._v(",")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n            "),a("span",{staticClass:"token control"},[s._v("assert")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v(">")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n            "),a("span",{staticClass:"token variable"},[s._v("_size")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("new_size")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n")])])]),a("p",[s._v("Public properties with no getter or setter are automatically backed by a hidden field. Private properties with no getter or setter are implemented as a plain field.")]),s._v(" "),a("p",[s._v("Properties can be defined within globally and within classes, structs and traits. Property names should be in "),a("code",[s._v("snake_case")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[s._v("#")]),s._v(" methods")]),s._v(" "),a("p",[s._v("Methods are syntactically the same as functions, except they are defined within classes, structs or traits.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("SCALER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("_scale")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("scale")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("double")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("*")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("scale")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n")])])]),a("p",[s._v("As with functions, methods should be named in "),a("code",[s._v("snake_case")])]),s._v(" "),a("h2",{attrs:{id:"constructors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructors"}},[s._v("#")]),s._v(" constructors")]),s._v(" "),a("p",[s._v("In ghūl methods named "),a("code",[s._v("init")]),s._v(" are constructors. When an object is constructed using a constructor expression, the corresponding "),a("code",[s._v("init")]),s._v(" method overload will be called based on the actual argument types")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("0")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("initial_count")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("count")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("initial_count")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("c")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// calls the parameterless overload of init()")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("d")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("COUNTER")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("50")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// calls init(initial_count: int)")]),s._v("\n")])])]),a("p",[s._v("Constructors can be defined in classes and structs")]),s._v(" "),a("h2",{attrs:{id:"namespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespaces"}},[s._v("#")]),s._v(" namespaces")]),s._v(" "),a("p",[s._v("Namespaces are introduced with the "),a("code",[s._v("namespace")]),s._v(" keyword followed by the namespace name and then the namespace body.")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Namespaces may be nested inside other namespaces")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Outer")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Inner")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n            "),a("span",{staticClass:"token function"},[s._v("stuff")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("A dotted namespace name is shorthand for nesting namespaces")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token function"},[s._v("stuff")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token class-name"},[s._v("Outer")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Inner")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("do_something")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("h3",{attrs:{id:"namespace-aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace-aggregation"}},[s._v("#")]),s._v(" namespace aggregation")]),s._v(" "),a("p",[s._v("A namespace definition is an instance of that namespace. Namespace instances are aggregated across all source files to form a single namespace scope. This means that all definitions within a namespace instance are visible unqualified within all other instances of that namespace in all source files:")]),s._v(" "),a("p",[a("code",[s._v("source-file-1.ghul")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// this definition of Test is visible unqualified")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// throughout the Example namespace:")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("trait")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Test")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[a("code",[s._v("source-file-2.ghul")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// class TEST can implement the Test trait without having")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// to quality the name Test:")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("TEST")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Test")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("h3",{attrs:{id:"definitions-outside-any-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#definitions-outside-any-namespace"}},[s._v("#")]),s._v(" definitions outside any namespace")]),s._v(" "),a("p",[s._v("If a source file contains no namespaces, then all definitions in the file are placed in a compiler generated namespace that is private to that source file. This is useful for examples and tests:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token comment"},[s._v("// the compiler places this in an auto-generated namespace private to this source file")]),s._v("\n"),a("span",{staticClass:"token function"},[s._v("entry")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token class-name"},[s._v("IO")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Std")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Hello, world!"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("For definitions to be visible from other files, they must be placed in an explicitly declared namespace.")]),s._v(" "),a("h3",{attrs:{id:"namespace-usage-consistency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace-usage-consistency"}},[s._v("#")]),s._v(" namespace usage consistency")]),s._v(" "),a("p",[s._v("If a source file contains any explicitly declared namespaces, then all definitions in that file must be within a namespace. Bare definitions outside of namespaces are not allowed in files with namespace declarations:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("entry")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token class-name"},[s._v("IO")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Std")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token string"},[s._v('"Hello, world!"')]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token comment"},[s._v("// only additional namespaces are allowed here")]),s._v("\n"),a("span",{staticClass:"token comment"},[s._v("// bare definitions are an error")]),s._v("\n")])])]),a("h2",{attrs:{id:"importing-symbols-with-use"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#importing-symbols-with-use"}},[s._v("#")]),s._v(" importing symbols with "),a("code",[s._v("use")])]),s._v(" "),a("p",[s._v("Symbols can be brought into the current namespace instance's scope using the use keyword. Imported symbols can then be used without qualification:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("use")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("TEST")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("t")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("TEST")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[a("code",[s._v("use")]),s._v(" applied to a namespace imports all symbols from that namespace:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("use")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// imports Example.TEST and Example.Test")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("t")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Test")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Note that "),a("code",[s._v("use")]),s._v(" only applies within the current "),a("code",[s._v("namespace")]),s._v(" definition. It does not import a symbol into all instances of the current namespace:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("UseExample")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("use")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("Example")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("ANOTHER_TEST")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Test")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("namespace")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("UseExample")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token comment"},[s._v("// TEST and Test still need qualification here")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("YET_ANOTHER_TEST")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("Example")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token class-name"},[s._v("Test")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("h2",{attrs:{id:"visibility-of-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visibility-of-symbols"}},[s._v("#")]),s._v(" visibility of symbols")]),s._v(" "),a("p",[s._v("In ghūl, the visibility of symbols outside their defining scope is managed by a naming convention which is partially enforced by the compiler")]),s._v(" "),a("h3",{attrs:{id:"global-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-symbols"}},[s._v("#")]),s._v(" global symbols")]),s._v(" "),a("p",[s._v("Classes, structs, traits, unions, global functions and global properties are accessible from any namespace. Prefixing their names with "),a("code",[s._v("_")]),s._v(" indicates they are intended to be private, but this is not enforced by the compiler:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("PUBLIC")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token function"},[s._v("public_function")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token variable"},[s._v("public_property")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("_PRIVATE")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token function"},[s._v("_private_function")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("->")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=>")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n"),a("span",{staticClass:"token variable"},[s._v("_private_property")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n")])])]),a("h3",{attrs:{id:"methods-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods-2"}},[s._v("#")]),s._v(" methods")]),s._v(" "),a("p",[s._v("Methods are public by default. To make a method protected, prefix its name with an underscore "),a("code",[s._v("_")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("THING")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token function"},[s._v("do_something_public")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("_do_something_protected")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n")])])]),a("p",[s._v("Protected access to methods "),a("em",[s._v("is")]),s._v(" enforced by the compiler")]),s._v(" "),a("h3",{attrs:{id:"properties-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties-2"}},[s._v("#")]),s._v(" properties")]),s._v(" "),a("p",[s._v("Properties are public read, protected write, unless they start with "),a("code",[s._v("_")]),s._v(", in which case they are protected read and write:")]),s._v(" "),a("div",{staticClass:"language-ghul extra-class"},[a("pre",{staticClass:"language-ghul"},[a("code",{staticClass:"language-ghul"},[a("span",{staticClass:"token keyword"},[s._v("struct")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("VALUE")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n    "),a("span",{staticClass:"token variable"},[s._v("public_property")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token variable"},[s._v("_protected_property")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("string")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n\n    "),a("span",{staticClass:"token function"},[s._v("init")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("value")]),s._v(": "),a("span",{staticClass:"token class-name"},[s._v("int")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),s._v(" "),a("span",{staticClass:"token keyword"},[s._v("is")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("public_property")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("value")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n        "),a("span",{staticClass:"token variable"},[s._v("_protected_property")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token string"},[s._v('"value is '),a("span",{staticClass:"token interpolation"},[a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("{")]),a("span",{staticClass:"token variable"},[s._v("value")]),a("span",{staticClass:"token interpolation-punctuation punctuation"},[s._v("}")])]),s._v('"')]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n    "),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v(" \n"),a("span",{staticClass:"token keyword"},[s._v("si")]),s._v("\n\n"),a("span",{staticClass:"token operator"},[s._v("...")]),s._v("\n\n"),a("span",{staticClass:"token keyword"},[s._v("let")]),s._v(" "),a("span",{staticClass:"token variable"},[s._v("v")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token class-name"},[s._v("VALUE")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token number"},[s._v("1234")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v("\n"),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("v")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("public_property")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// OK it's public")]),s._v("\n"),a("span",{staticClass:"token function"},[s._v("write_line")]),a("span",{staticClass:"token punctuation"},[s._v("(")]),a("span",{staticClass:"token variable"},[s._v("v")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("_protected_property")]),a("span",{staticClass:"token punctuation"},[s._v(")")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// compile time error: it's protected")]),s._v("\n"),a("span",{staticClass:"token variable"},[s._v("v")]),a("span",{staticClass:"token operator"},[s._v(".")]),a("span",{staticClass:"token variable"},[s._v("public_property")]),s._v(" "),a("span",{staticClass:"token operator"},[s._v("=")]),s._v(" "),a("span",{staticClass:"token number"},[s._v("5678")]),a("span",{staticClass:"token punctuation"},[s._v(";")]),s._v(" "),a("span",{staticClass:"token comment"},[s._v("// compile time error: not publicly assignable")]),s._v("\n")])])]),a("h3",{attrs:{id:"planned-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#planned-changes"}},[s._v("#")]),s._v(" planned changes")]),s._v(" "),a("p",[s._v("Protected access will become private in a future release: derived types should not rely on reading or writing members with "),a("code",[s._v("_")]),s._v(" prefixed names")])])}),[],!1,null,null,null);a.default=e.exports}}]);