(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{326:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"type-inference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-inference"}},[t._v("#")]),t._v(" type inference")]),t._v(" "),s("h2",{attrs:{id:"let-statements-and-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-statements-and-expressions"}},[t._v("#")]),t._v(" let statements and expressions")]),t._v(" "),s("p",[t._v("When no explicit type is given for a variable in a let statement or expression, the variable type is inferred from the initializer, provided one is present")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("a_string")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"12345"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("an_int")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("12345")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("an_int_array")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"list-literal-element-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-literal-element-type"}},[t._v("#")]),t._v(" list literal element type")]),t._v(" "),s("p",[t._v("The element type of list literals is inferred from the types of the elements. The compiler will try to find a type that is compatible with all the elements.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("Base")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("init")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("Base")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token function"},[t._v("init")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("super")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("init")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("array_of_base")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token class-name"},[t._v("Base")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("array_of_object")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token class-name"},[t._v("Base")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("object")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("array_of_int")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If a list contains tuple literals, the compiler will attempt to find compatible common types for each tuple element across all the elements in the list")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("int_string")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("123")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"hello"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("456")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"goodbye"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("int_object")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("123")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("456")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("798")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"wibble"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"if-expression-branch-result-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-expression-branch-result-type"}},[t._v("#")]),t._v(" if expression branch result type")]),t._v(" "),s("p",[t._v("The result type of an if expression is inferred from the types of all the branch results. The compiler will try to find a type that is compatible with all the results")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("derived")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("true")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n        "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("base")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("if")]),t._v(" "),s("span",{staticClass:"token boolean"},[t._v("true")]),t._v(" "),s("span",{staticClass:"token control"},[t._v("then")]),t._v("\n        "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("else")]),t._v("\n        "),s("span",{staticClass:"token class-name"},[t._v("Base")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v("\n    "),s("span",{staticClass:"token control"},[t._v("fi")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"generic-class-struct-and-variant-constructors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generic-class-struct-and-variant-constructors"}},[t._v("#")]),t._v(" generic class, struct and variant constructors")]),t._v(" "),s("p",[t._v("When constructing a generic class, struct or variant, the actual generic type arguments will be inferred from the constructor method arguments if possible")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("THING")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n    "),s("span",{staticClass:"token variable"},[t._v("value")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n    "),s("span",{staticClass:"token function"},[t._v("init")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("value")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token keyword"},[t._v("is")]),t._v("\n        "),s("span",{staticClass:"token variable"},[t._v("self")]),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token variable"},[t._v("value")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("value")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n    "),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("si")]),t._v("\n\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("int_thing")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("THING")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token number"},[t._v("1234")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("string_thing")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("THING")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token string"},[t._v('"hello"')]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This type of inference is only possible if all type arguments are referenced in the constructor actual arguments and if the constructor overload to call is unambiguous")]),t._v(" "),s("h2",{attrs:{id:"generic-function-or-method-calls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generic-function-or-method-calls"}},[t._v("#")]),t._v(" generic function or method calls")]),t._v(" "),s("p",[t._v("When calling a generic global function, a generic method, or a static method on a generic class or struct, the compiler will try to infer the generic type arguments from the types of the actual argument passed to the function or method")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token variable"},[t._v("do_something")]),s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("a")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("b")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("->")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("T")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n\n"),s("span",{staticClass:"token operator"},[t._v("...")]),t._v("\n\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("base")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("do_something")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("Base")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("derived")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("do_something")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("obj")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token function"},[t._v("do_something")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token class-name"},[t._v("object")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token class-name"},[t._v("DERIVED")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"anonymous-function-return-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#anonymous-function-return-type"}},[t._v("#")]),t._v(" anonymous function return type")]),t._v(" "),s("p",[t._v("When constructing an anonymous function literal, the compiler will attempt to infer the return type from either the type of the expression body or from the type of return expressions in the block body")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("returns_int")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("int")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=>")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("*")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n"),s("span",{staticClass:"token keyword"},[t._v("let")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("returns_string")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("s")]),t._v(": "),s("span",{staticClass:"token class-name"},[t._v("string")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=")]),t._v(" "),s("span",{staticClass:"token string"},[t._v('"'),s("span",{staticClass:"token interpolation"},[s("span",{staticClass:"token interpolation-punctuation punctuation"},[t._v("{")]),s("span",{staticClass:"token variable"},[t._v("s")]),s("span",{staticClass:"token interpolation-punctuation punctuation"},[t._v("}")])]),s("span",{staticClass:"token interpolation"},[s("span",{staticClass:"token interpolation-punctuation punctuation"},[t._v("{")]),s("span",{staticClass:"token variable"},[t._v("s")]),s("span",{staticClass:"token interpolation-punctuation punctuation"},[t._v("}")])]),t._v('"')]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"anonymous-function-argument-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#anonymous-function-argument-types"}},[t._v("#")]),t._v(" anonymous function argument types")]),t._v(" "),s("p",[t._v("When anonymous function literals are passed as arguments to a function or method and an unambiguous overload match can be made without knowing the exact function type, the compiler can figure out the argument types based on the matching overload.")]),t._v(" "),s("div",{staticClass:"language-ghul extra-class"},[s("pre",{staticClass:"language-ghul"},[s("code",{staticClass:"language-ghul"},[s("span",{staticClass:"token punctuation"},[t._v("[")]),s("span",{staticClass:"token number"},[t._v("1")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("2")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("4")]),s("span",{staticClass:"token punctuation"},[t._v(",")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("5")]),s("span",{staticClass:"token punctuation"},[t._v("]")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("|")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(".")]),s("span",{staticClass:"token function"},[t._v("filter")]),s("span",{staticClass:"token punctuation"},[t._v("(")]),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v("=>")]),t._v(" "),s("span",{staticClass:"token variable"},[t._v("i")]),t._v(" "),s("span",{staticClass:"token operator"},[t._v(">")]),t._v(" "),s("span",{staticClass:"token number"},[t._v("3")]),s("span",{staticClass:"token punctuation"},[t._v(")")]),s("span",{staticClass:"token punctuation"},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In this example, "),s("code",[t._v("self")]),t._v(" is already known to be "),s("code",[t._v("Pipe[int]")]),t._v(", so "),s("code",[t._v("Pipe[int].filter(predicate: int -> bool) -> Pipe[int]")]),t._v(" is the only overload that could match. Hence the "),s("code",[t._v("predicate")]),t._v(" argument must be "),s("code",[t._v("int -> bool")]),t._v(" and the type of "),s("code",[t._v("i")]),t._v(" must be "),s("code",[t._v("int")])])])}),[],!1,null,null,null);s.default=e.exports}}]);